import { Button, ListView } from "std-widgets.slint";

import { DialogWindow } from "dialog.slint";
import { SetupView } from "../views/setup.slint";
import { UnlockVaultView } from "../views/unlock_vault.slint";
import { VaultView } from "../views/vault.slint";

export enum Page {
    Setup,
    UnlockVault,
    Vault,
}

struct MainWindowItem {
    id: int,
    name: string,
}

struct VaultItem {
    id: int,
    name: string,
    username: string,
    password: string,
    url: string,
    notes: string,
}

export component MainWindow inherits Window {
    preferred-width: 850px;
    preferred-height: 400px;
    min-width: 850px;
    min-height: 500px;

    callback open_create_database();
    callback open_unlock_vault();
    callback unlock_vault(string, string);
    callback load_selected_item(int);
    callback save_selected_item(VaultItem);
    callback add_vault_item();
    callback delete_vault_item(int);

    callback copy_to_clipboard(string);
    
    in property <bool> disable_input: false;
    in property <string> win_title;
    in property <bool> vault_open: false;

    property <Page> active_page: Page.Setup; // Page.Setup

    in-out property <string> vault_location: "";
    in-out property <[MainWindowItem]> vault_items;
    in-out property <VaultItem> selected_vault_item;
    
    title: win_title;

    VerticalLayout {
        spacing: 10px;
        y: -20px;

        // Setup page
        if active_page == Page.Setup : SetupView {
            open_create_database => { open_create_database() }
            open_unlock_vault => { 
                open_unlock_vault();
                if vault_location != "" {
                    active_page = Page.UnlockVault;
                }
            }
        }

        // Unlock vault page
        if active_page == Page.UnlockVault : UnlockVaultView {
            vault_location: vault_location;
            unlock_clicked(location, password) => {
                unlock_vault(location, password);
                if vault_open {
                    active_page = Page.Vault;
                }
            }
            cancel_clicked => { vault_location = ""; active_page = Page.Setup; }
        }

        // Vault page
        if active_page == Page.Vault : VaultView {
            items <=> root.vault_items;
            selected_item <=> root.selected_vault_item;
            load_item(item_id) => { load_selected_item(item_id); }
            save_item(item) => { save_selected_item(item); }
            add_item => { add_vault_item(); }
            delete_item(item_id) => { delete_vault_item(item_id); }
            copy_to_clipboard(text) => { copy_to_clipboard(text); }
        }
    }

    // We can use the TouchArea to cover the entires window to disable input when visible
    TouchArea {
        visible: disable_input;
        width: parent.width;
        height: parent.height;
        clicked => { /* swallow input */ }
    }
}